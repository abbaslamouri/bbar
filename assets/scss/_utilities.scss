@use 'variables' as *;
@use 'grid' as *;
@use 'mixins' as *;

.visually-hidden {
  @include visually-hidden();
  // border: 0;
  // clip: rect(0 0 0 0);
  // height: auto;
  // margin: 0;
  // overflow: hidden;
  // padding: 0;
  // position: absolute;
  // width: 1px;
  // white-space: nowrap;
}

.not-focus-visually-hidden {
  &:not(:focus) {
    border: 0;
    clip: rect(0 0 0 0);
    height: auto;
    margin: 0;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
    white-space: nowrap;
  }
}

.container {
  padding: var(--size-xl, 1rem);
  max-width: var(--fluid-max-width);
  // min-height: 100%;
  margin-inline: auto;
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: var(--size-l);
  // border: 5px solid purple;
}

@each $size, $value in $size-base-steps {
  .flow-#{$size} > * + * {
    margin-block-start: var(--size-#{$size});
  }
}

.panorama {
  display: flex;
  align-items: center;
  gap: var(--space-xs);
  text-transform: uppercase;
  font-size: var(--font-size--1);
  letter-spacing: var(--tracking-9);
  color: var(--color-primary-50);

  span {
    font-size: var(--font-size-0);
  }
}

.rounded-xxs {
  border-radius: var(--size-2xs);
}

// .grid-21 {
//   @include grid-21(1100);
// }

// .grid-421 {
//   @include grid-421(1200, 800);
// }

.gap-xxs {
  gap: var(--space-xxs);
}
.gap-xs {
  gap: var(--space-xs);
}
.gap-sm {
  gap: var(--space-sm);
}
